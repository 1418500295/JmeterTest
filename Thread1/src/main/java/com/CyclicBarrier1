package com.ok.test;

import org.omg.CORBA.INTERNAL;

import java.util.concurrent.*;

public class Demo {
    static ExecutorService executorService = Executors.newCachedThreadPool();
    protected static int THREAD_NUM = 5;
    protected static CountDownLatch countDownLatch = new CountDownLatch(THREAD_NUM);
    protected static CountDownLatch countDownLatch1 = new CountDownLatch(1);

    protected static CyclicBarrier cyclicBarrier = new CyclicBarrier(THREAD_NUM);
    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i < THREAD_NUM ; i++) {
            executorService.execute(new Runnable() {
                public void run() {
                    try {
                        countDownLatch1.await();
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    System.out.println("线程"+Thread.currentThread().getName()+"正在写入数据...");
                    try {
                        Thread.sleep(5000);      //以睡眠来模拟写入数据操作
                        System.out.println("线程"+Thread.currentThread().getName()+"写入数据完毕，等待其他线程写入完毕");
                        try {
                            cyclicBarrier.await();
                        } catch (BrokenBarrierException e) {
                            throw new RuntimeException(e);
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println("所有线程写入完毕，继续处理其他任务...");
                    countDownLatch.countDown();
                }
            });
        }
        System.out.println("开始");
        countDownLatch1.countDown();
        countDownLatch.await();
        System.out.println("结束");
        executorService.shutdown();
    }
}
